name: CD - Build & Push to Docker Hub

# main 브랜치에 push 혹은 태그 생성 시 동작
on:
  push:
    branches: [ main ]
    # 태그(push)를 이용해 버전 릴리스할 수도 있습니다
    tags: [ 'v*.*.*' ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1) 코드 체크아웃
      - name: Check out code
        uses: actions/checkout@v3

      # 2) Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3) 이미지 빌드 & 태그 & 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags:
            - ${{ secrets.DOCKERHUB_USERNAME }}/myflask:latest
            - ${{ secrets.DOCKERHUB_USERNAME }}/myflask:${{ github.sha }}

      # 4) 뒷정리(선택)
      - name: Log out from Docker Hub
        run: docker logout
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      REMOTE_APP_DIR: ${{ secrets.REMOTE_APP_DIR }}

    steps:
      - uses: actions/checkout@v3

      - name: Prepare SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GCP_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.GCP_HOST }} >> ~/.ssh/known_hosts

      - name: Ensure remote dir exists
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} \
            mkdir -p ${REMOTE_APP_DIR}

      - name: Copy files to VM (scp)
        run: |
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -r \
            docker-compose.yml docker-compose.prod.yml nginx \
            ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }}:${REMOTE_APP_DIR}/

      - name: Pull & restart on VM
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} \
            set -euo pipefail; \
            cd ${REMOTE_APP_DIR} && \
            export DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME} && \
            docker compose -f docker-compose.yml -f docker-compose.prod.yml pull && \
            docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d --remove-orphans